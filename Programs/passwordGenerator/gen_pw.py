import nltk
from nltk.corpus import words
from random import randint, choice
from string import ascii_letters as abc, digits as dg, punctuation as pct
from functools import reduce

# VARIABLES
pct = pct.replace(",", "")
characters =  dg + abc + pct
try:
    word_set = set(words.words())
except:
    nltk.download('words')
    word_set = set(words.words())

# HELPER FUNCTIONS
def test_character_criterion(test_str, char_set, n):
    return len(set(test_str).intersection(char_set)) >= n

def has_words(test_set):
    return True if word_set.intersection(test_set) else False

def gen_k_substrs(s, k = 3):
    return [ks for ks in [s[i: j] for i in range(len(s)) 
            for j in range(i + 1, len(s) + 1)] if len(ks) >= k]

# PRIMARY FUNCTION
def construct_password(
    bounds = (16, 64), 
    k = 3,
    MAX_ITERATIONS = int(1e3),
    character_criterion = [
        # (set of characters, # of required characters)
        (set(abc), 3),
        (set(pct), 1),
        (set(dg), 1)
    ]):
    # EXTRA CREDIT: TODO
    # 1) [] Prevent character repetitions.  Add another paramter to the function called, R,
    #       passwords returned from this function should have no character repeated more than
    #       R times in a row.
    #       R = 3 -> aa11kll12 (VALID)
    #       R = 3 -> zzozz18ggg (NOT VALID)
    # 2) [] Prevent sequence formation of digits and letters: (123,..., cdef,... ).  Add another
    #       paramater called, S, passwords should not contain sequences longer than S - 1.
    #       S = 3 ->  12ab! (VALID)
    #       S = 4 ->  cdef9910 (NOT VALID) 
    # 3) [] Check against a password breach corpus.  Download a passwords corpus breach database.
    #       No password generated by this function should be in the database.
    # 4) [] Add additional improvements not listed.
    # 5) [] A) Add docstrings to all of the functions in this program giving a detailed expalanaition of:
    #       1. The parameters, 2. What the function does 3. What the function returns and modifies  
    #       B) Add return types and paramter types to all of the function declarations.
    count = 0
    length = randint(*bounds) # password length
    while count < MAX_ITERATIONS:
        pw, word_str = "", ""
        for _ in range(length):
            c = choice(characters)
            pw += c
            # If the character is a letter add to the word_str variable
            # If this strings gets large enough (exceeds our k value) we
            # will test all substrings >= to k to veridy that no dictionary
            # words are present
            if c.isalpha():
                word_str += c
            else:
                # If word_str exceeds our k value
                if len(word_str) >= k:
                    # generate all k+ length substrings & test if any are english words
                    substrs = gen_k_substrs(word_str, k)
                    if has_words(substrs):
                        # if there are dictionary words, loop until you generate a character
                        # sequence without words.
                        inner_count = 0  
                        while inner_count < MAX_ITERATIONS:
                            new_word_str = "".join([choice(characters) for _ in range(len(word_str))])
                            new_substrs = gen_k_substrs(new_word_str, k)
                            if not has_words(new_substrs):
                                pw = pw.replace(word_str, new_word_str)
                                break
                        else:
                            Exception("""Max Iteration Error - failed to generate a password.  Please adjust parameters & try again.""")
                            inner_count += 1
                # reset the word_str variable
                word_str = ""
                    
        if reduce(lambda a, b: a and b, [test_character_criterion(pw, cset, n) for cset, n in character_criterion]):
            return pw
    else:
        raise Exception("""Max Iteration Error - failed to generate a password.  Please adjust parameters & try again.""")

